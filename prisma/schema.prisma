generator client {
  provider = "prisma-client-js"  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Food {
  id         Int         @id @default(autoincrement())
  name       String
  price      Int
  status     Boolean     @default(true)
  is_drink   Boolean
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now())
  inventory  Int
  FoodOrder  FoodOrder[]
}

model FoodOrder {
  food_id    Int
  wedding_id Int
  count      Int
  note       String?
  created_at DateTime @default(now())
  updated_at DateTime    @default(now())
  Food       Food     @relation(fields: [food_id], references: [id])
  Wedding    Wedding  @relation(fields: [wedding_id], references: [id])

  @@id([food_id, wedding_id])
  @@index([wedding_id], map: "FoodOrder_wedding_id_fkey")
}

model Bill {
  id                  Int      @id @default(autoincrement())
  wedding_id          Int
  payment_date        DateTime
  service_total_price Int
  total_price         Int
  created_at          DateTime @default(now())
  updated_at          DateTime     @default(now())
  Wedding             Wedding  @relation(fields: [wedding_id], references: [id])

  @@index([wedding_id], map: "Bill_wedding_id_fkey")
}

model Lobby {
  id              Int       @id @default(autoincrement())
  max_table_count Int
  min_table_price Int
  is_penalty_mode Boolean   @default(false)
  deposit_percent Int       @default(30)
  created_at      DateTime  @default(now())
  updated_at      DateTime     @default(now())
  name            String
  Wedding         Wedding[]
}

model Wedding {
  id              Int            @id @default(autoincrement())
  groom           String
  bride           String
  order_date      DateTime
  wedding_date    DateTime
  shift           Shift
  lobby_id        Int
  customer_id     Int
  deposit         Int
  table_count     Int
  min_table_price Int
  created_at      DateTime       @default(now())
  updated_at      DateTime     @default(now())
  note            String?
  Bill            Bill[]
  FoodOrder       FoodOrder[]
  ServiceOrder    ServiceOrder[]
  Customer        Customer       @relation(fields: [customer_id], references: [id])
  Lobby           Lobby          @relation(fields: [lobby_id], references: [id])

  @@index([customer_id], map: "Wedding_Customer_id_fkey")
  @@index([lobby_id], map: "Wedding_lobby_id_fkey")
}

model Customer {
  id         Int       @id @default(autoincrement())
  name       String
  phone      String
  created_at DateTime  @default(now())
  updated_at DateTime    @default(now())
  Wedding    Wedding[]
}

model Service {
  id           Int            @id @default(autoincrement())
  name         String
  price        Int
  status       Boolean
  created_at   DateTime       @default(now())
  updated_at   DateTime    @default(now())
  ServiceOrder ServiceOrder[]
}

model ServiceOrder {
  service_id Int
  wedding_id Int
  count      Int
  created_at DateTime @default(now())
  updated_at DateTime    @default(now())
  Service    Service  @relation(fields: [service_id], references: [id])
  Wedding    Wedding  @relation(fields: [wedding_id], references: [id])

  @@id([service_id, wedding_id])
  @@index([wedding_id], map: "ServiceOrder_wedding_id_fkey")
}

model User {
  id             Int              @id @default(autoincrement())
  isAdmin        Boolean          @default(false)
  display_name   String
  username       String           @unique
  password       String
  created_at     DateTime         @default(now())
  updated_at     DateTime    @default(now())
  UserPermission UserPermission[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  created_at     DateTime         @default(now())
  updated_at     DateTime    @default(now())
  UserPermission UserPermission[]
}

model UserPermission {
  user_id       Int
  permission_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime     @default(now())
  Permission    Permission @relation(fields: [permission_id], references: [id])
  User          User       @relation(fields: [user_id], references: [id])

  @@id([user_id, permission_id])
  @@index([permission_id], map: "UserPermission_permission_id_fkey")
}

enum Shift {
  noon
  evening
}
